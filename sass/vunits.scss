@function strip-unit($input) {
  @return $input / ($input * 0 + 1); // <= Sass bug?
}

$vu-views: ()!global;

@function vu-calc($value, $width, $height){
  // Store $value unit
  $unit: unit($value);

  // Remove unit from $value and convert to ratio
  $ratio: strip-unit($value) / 100;

  // Calc and store return values
  $calced-width: floor(strip-unit($width) * $ratio);
  $calced-height: floor(strip-unit($height) * $ratio);

  $is-portrait: $calced-width < $calced-height;

  @if $unit == vw { @return $calced-width; }
  @else if $unit == vh { @return $calced-height; }

  @else if $unit == vmax {
    @if $is-portrait { @return $calced-height; }
    @else { @return $calced-width; }
  }

  @else if $unit == vmin {
    @if $is-portrait { @return $calced-width; }
    @else { @return $calced-height; }
  }
}

@mixin vu-unit($property, $value, $query: null){
  // Check that the $value has a unit
  @if unitless($value){
    // Throw error if the $value is unitless
    @error "Viewport values include a specified unit. Please check your input [#{$value}]";
  } @else {
    $unit : unit($value);
    $units: (vw, vh, vmin, vmax);

    // Check that the unit is a V-unit
    @if index($units, $unit) == null {
      // Throw error if a V-unit was not used
      @error "Viewport values include a specified V-unit. Please check your input [#{$value}]";
    // Store Selector/Property/Value
    } @else {

      // Instantiate global $selectors object
      // Force type-cast as map
      @if global-variable-exists(SelectorGroup) != true {
        $SelectorGroup: ()!global;
      }

      $instance: (
        selector: &,
        query: $query,
        rules: (
          $property: $value
        )
      );

      $SelectorGroup: append($SelectorGroup, $instance)!global;

      // Include default styles for supporting devices
      #{$property}: $value;
    }
  }
}

@mixin vu-enque-queries($queryList) {
  @if type-of($queryList) == list {
    @each $query in $queryList {
      @if type-of($query) == map {
        $vu-views: append($vu-views, $query)!global;
      } @else {
        @error "Vunit media query targets should be defined as a amp object. ["+type-of(queryList)+"] is not a valid input type.";
      }
    }
  }
  @else {
    @error "Vunit media queries should be enqued as a list. ["+type-of(queryList)+"] is not a valid input type.";
  }
}

@mixin vu-compile(){
  // Loop thru all breakpoints
  @each $view in $vu-views {
    $query-medium: #{map-get($view, medium)};
    $query-width: #{map-get($view, width)};
    $query-height: #{map-get($view, height)};
    $query-extra: #{map-get($view, extra)};
    $query-string: "#{$query-medium} and (device-width: #{$query-width}) and (device-height: #{$query-height})";

    @if $query-extra != null {
      $query-string: join($query-string, " " + $query-extra);
    }

    @media #{$query-string} {
      // Loop thru each ruleset in $SelectorGroup
      @each $target in $SelectorGroup {
        $target-query: nth(map-get($target, query), 1);
        $select: nth(map-get($target, selector), 1);
        $rules: nth(map-get($target, rules), 1);
        $property: nth($rules, 1);
        $value: nth($rules, 2);

        #{$select} {
          // Calc each value by current $view's device specs
          @if $target-query == null {
            #{$property}: vu-calc($value, $query-width, $query-height);
          } @else {
            // insert special query
            @media #{$target-query} {
              #{$property}: vu-calc($value, $query-width, $query-height);
            }
          }
        }
      }
    }
  }
}

@include vu-enque-queries((
  ( // iPhone 3/4(s)
    medium: "only screen",
    width: 320px,
    height: 480px,
    extra: "and (-webkit-min-device-pixel-ratio: 1) and (-webkit-max-device-pixel-ratio: 2)"
  ),
  ( // iPhone 5(s)
    medium: "only screen",
    width: 320px,
    height: 568px,
    extra: "and (-webkit-min-device-pixel-ratio: 2)"
  )
));


.test {
  .hey {
    @include vu-unit(height, 70vw, "(device-width: 320px) and (device-height: 640px)");
    @include vu-unit(width, 38vw);
  }
  .who, .huh {
    @include vu-unit(height, 100vw);
    @include vu-unit(width, 50vw);
  }
  .what {
    @include vu-unit(height, 100vw);
    // @error $SelectorGroup;
  }
}

.another-test {
  @include vu-unit(width, 50vw);
  .whaaat {
    @include vu-unit(width, 50vw);
    &, & .hey {
      @include vu-unit(width, 50vw);
    }
  }
}

@include vu-compile();